#!/usr/bin/env python
import os
import sys
import time
import gzip
import argparse
import multiprocessing


def get_opts():
	group = argparse.ArgumentParser()
	group.add_argument('-g', '--genome', help='Input genome fasta file', required=True)
	group.add_argument('-s', type=int, help='window size', required=True)
	group.add_argument('-r', help='Directory of rd files generated by mosdepth', required=True)
	group.add_argument('-b', help='Directory of bam files or a file contain 2 columns: sample_name seq_depth', required=True)
	group.add_argument('-l', help='List file contain 4 columns: chromosome_name start_position end_position gene_name', required=True)
	group.add_argument('-w', '--workdir', help='Working directory', required=True)
	group.add_argument('--group', help='Group file contain 2 columns: group_id group_name(without space)', required=True)
	group.add_argument('--sample', help='Sample file contain 2 colunms: sample_name group_id', required=True)
	group.add_argument('--wild', help='Wild group id', required=True)
	group.add_argument('-t', '--threads', type=int, help='Threads', default=10)
	group.add_argument('--rerun', action='store_true', help='Re run pipeline')
	return group.parse_args()


def time_print(info):
	print("\033[32m%s\033[0m %s"%(time.strftime('[%H:%M:%S]',time.localtime(time.time())), info))


def log_write(log_file, info):
	with open(log_file, 'a') as fout:
		fout.write(info+"\n")


def convert_rd_to_cn(in_gc, in_rd, out_cn, log_file):
	cmd = "convert_RD_to_CN.py %s %s %s &>> %s"%(in_gc, in_rd, out_cn, log_file)
	log_write(log_file, "\t%s"%cmd)
	os.system(cmd)


def Calc_CNV_pipeline(genome, win_size, rd_dir, bam_dir_or_seq_depth, gene_list, group_file, sample_file, wild_group, wrk_dir, rerun, ts):
	if wrk_dir == '/':
		time_print("Fatal error: cannot use root directory as working directory")
		sys.exit(0)

	if rerun:
		f_list = ["01.GC.stat", "02.Sample.depth", "03.rd", "04.CN", "05.genes.cn", "06.genes.round.cn", "07.RFD"]
		for fn in f_list:
			fn = os.path.join(wrk_dir, fn)
			if os.path.exists(fn):
				os.system("rm -rf %s"%(fn))

	if not os.path.exists(wrk_dir):
		os.mkdir(wrk_dir)
	
	log_file = os.path.join(wrk_dir, 'full.log')
	if os.path.exists(log_file):
		os.remove(log_file)
		
	time_print("Step1: GC Statistics")
	log_write(log_file, "Step1: GC Statistics")
	gc_file = os.path.join(wrk_dir, "01.GC.stat")
	if not os.path.exists(gc_file):
		cmd = "GC_stat.py -g %s -b %d -o %s -t %d &>> %s"%(genome, win_size, gc_file, ts, log_file)
		print("\tRunning: %s"%cmd)
		os.system(cmd)
	else:
		print("\tFile %s exists, skipping"%gc_file)

	time_print("Step2: Getting samples sequencing depth")
	log_write(log_file, "Step2: Getting samples sequencing depth")
	s_dep = os.path.join(wrk_dir, "02.Sample.depth")
	if not os.path.exists(s_dep) and os.path.isdir(bam_dir_or_seq_depth):
		cmd = "get_seq_depth.py %s %s %s %d &>> %s"%(genome, bam_dir_or_seq_depth, s_dep, ts, log_file)
		print("\tRunning: %s"%cmd)
		os.system(cmd)
	elif os.path.isfile(bam_dir_or_seq_depth):
		cmd = "cp %s %s"%(bam_dir_or_seq_depth, s_dep)
		print("\tRunning: %s"%cmd)
		os.system(cmd)
	else:
		print("\tFile %s exists, skipping"%s_dep)

	time_print("Step3: Reading read depth calculated by mosdepth and normalizing")
	log_write(log_file, "Step3: Reading read depth calculated by mosdepth and normalizing")
	norm_rd_dir = os.path.join(wrk_dir, "03.rd")
	if not os.path.exists(norm_rd_dir):
		os.mkdir(norm_rd_dir)
		cmd = "normalization_mosdepth.py %s %s %s %d &>> %s"%(rd_dir, s_dep, norm_rd_dir, ts, log_file)
		print("\tRunning: %s"%cmd)
		os.system(cmd)
	else:
		print("\tFolder %s exists, skipping"%norm_rd_dir)
	
	time_print("Step4: Converting read depth to CN")
	log_write(log_file, "Step4: Converting read depth to CN")
	cn_dir = os.path.join(wrk_dir, "04.CN")
	if not os.path.exists(cn_dir):
		os.mkdir(cn_dir)
		pool = multiprocessing.Pool(processes = ts)
		res = []
		for rd in os.listdir(norm_rd_dir):
			if rd.split('.')[-1].lower() != 'rd':
				continue
			sp = rd.split('.')[0]
			r = pool.apply_async(convert_rd_to_cn, args=(gc_file, os.path.join(norm_rd_dir, rd), os.path.join(cn_dir, sp+".CN"), log_file, ))
			res.append(r)
		pool.close()
		pool.join()
	else:
		print("\tFolder %s exists, skipping"%cn_dir)
	
	time_print("Step5: Getting genes CN with all samples")
	log_write(log_file, "Step5: Getting genes CN with all samples")
	cn_file = os.path.join(wrk_dir, "05.genes.cn")
	if not os.path.exists(cn_file):
		cmd = "get_gene_cn.py %s %s %s &>> %s"%(cn_dir, gene_list, cn_file, log_file)
		print("\tRunning: %s"%cmd)
		os.system(cmd)
	else:
		print("\tFile %s exists, skipping"%cn_file)
	
	time_print("Step6: Rounding CN on genes")
	log_write(log_file, "Step6: Rounding CN on genes")
	round_cn_file = os.path.join(wrk_dir, "06.genes.round.cn")
	if not os.path.exists(round_cn_file):
		cmd = "rounding_CN.py %s %s &>> %s"%(cn_file, round_cn_file, log_file)
		print("\tRunning: %s"%cmd)
		os.system(cmd)
	else:
		print("\tFile %s exists, skipping"%round_cn_file)
	
	time_print("Step7: Calculating RFD and F-test")
	log_write(log_file, "Step7: Calculating RFD and F-test")
	rfd_dir = os.path.join(wrk_dir, "07.RFD")
	if not os.path.exists(rfd_dir):
		cmd = "calc_RFD.py -i %s -g %s -s %s -w %s -o %s &>> %s"%(round_cn_file, group_file, sample_file, wild_group, rfd_dir, log_file)
		print("\tRunning: %s"%cmd)
		os.system(cmd)
	else:
		print("\tFolder %s exists, skipping"%rfd_dir)
	
	time_print("Finished")


if __name__ == "__main__":
	opts = get_opts()
	genome = opts.genome
	win_size = opts.s
	rd_dir = opts.r
	bam_dir_or_seq_depth = opts.b
	wrk_dir = opts.workdir
	gene_list = opts.l
	ts = opts.threads
	group_file = opts.group
	sample_file = opts.sample
	wild_group = opts.wild
	rerun = opts.rerun
	Calc_CNV_pipeline(genome, win_size, rd_dir, bam_dir_or_seq_depth, gene_list, group_file, sample_file, wild_group, wrk_dir, rerun, ts)
